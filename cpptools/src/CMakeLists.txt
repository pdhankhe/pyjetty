find_program ( FASTJETCONFIG fastjet-config )
message(STATUS "Using fjconfig at ${FASTJETCONFIG}")
if (EXISTS ${FASTJETCONFIG})
  execute_process ( COMMAND ${FASTJETCONFIG} --prefix WORKING_DIRECTORY /tmp OUTPUT_VARIABLE FASTJET_DIR OUTPUT_STRIP_TRAILING_WHITESPACE )
  execute_process ( COMMAND ${FASTJETCONFIG} --cxxflags WORKING_DIRECTORY /tmp OUTPUT_VARIABLE FASTJET_CXXFLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
  execute_process ( COMMAND ${FASTJETCONFIG} --libs --plugins WORKING_DIRECTORY /tmp OUTPUT_VARIABLE FASTJET_LIBS OUTPUT_STRIP_TRAILING_WHITESPACE )
  message( STATUS "FASTJET_DIR: ${FASTJET_DIR}")
  message( STATUS "FASTJET_CXXFLAGS: ${FASTJET_CXXFLAGS}")
  message( STATUS "FASTJET_LIBS: ${FASTJET_LIBS}")
  # add_subdirectory(fjext)
  # add_subdirectory(fjcontrib)
else()
  message(WARNING "No fastjet - a module will not be compiled...")
endif()

find_program ( PYTHIA8CONFIG pythia8-config )
message(STATUS "Using pythia8-config at ${PYTHIA8CONFIG}")
if (EXISTS ${PYTHIA8CONFIG})
  execute_process ( COMMAND ${PYTHIA8CONFIG} --prefix WORKING_DIRECTORY /tmp OUTPUT_VARIABLE PYTHIA8_DIR OUTPUT_STRIP_TRAILING_WHITESPACE )
  execute_process ( COMMAND ${PYTHIA8CONFIG} --cxxflags WORKING_DIRECTORY /tmp OUTPUT_VARIABLE PYTHIA8_CXXFLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
  execute_process ( COMMAND ${PYTHIA8CONFIG} --ldflags WORKING_DIRECTORY /tmp OUTPUT_VARIABLE PYTHIA8_LDFLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
  message( STATUS "PYTHIA8_DIR: ${PYTHIA8_DIR}")
  message( STATUS "PYTHIA8_CXXFLAGS: ${PYTHIA8_CXXFLAGS}")
  message( STATUS "PYTHIA8_LDFLAGS: ${PYTHIA8_LDFLAGS}")

  find_package(HepMC REQUIRED HepMC)
  if (HEPMC_FOUND)
    add_definitions(-DUSE_HEPMC)
    message( STATUS "HEPMC_LIBRARIES: ${HEPMC_LIBRARIES}")
    message( STATUS "HEPMC_LIBRARY_DIRS: ${HEPMC_LIBRARY_DIRS}")
    message( STATUS "HEPMC_LINK_LIBRARIES: ${HEPMC_LINK_LIBRARIES}")
    # add_subdirectory(pythiaext)
  else()
    message(WARNING "PYTHIA tools require HEPMC ver 2.x...")
  endif()

  if (EXISTS ${FASTJETCONFIG})
    # add_subdirectory(pythiafjext)
  endif()

else()
  message(WARNING "Some of this requires pythia8-config... - must be in your \$PATH")
endif()

find_package(HEPPY REQUIRED HEPPYSET)
add_subdirectory(aleph)

find_package(HepMC3 REQUIRED HepMC)
if (HEPMC3_FOUND)
  message( STATUS "HEPMC3_INCLUDE_DIR: ${HEPMC3_INCLUDE_DIR}")
  message( STATUS "HEPMC3_LIBRARY: ${HEPMC3_LIBRARY}")
  if (${HEPMC3_VERSION_MINOR} GREATER "0")
    message( STATUS "HEPMC3 minor version ${HEPMC3_VERSION_MINOR} > 0 - adding HEPMC3 definition")
    add_definitions(-DHEPMC31)
  endif()
  if (${HEPMC3_VERSION} VERSION_GREATER "3.0")
    message( STATUS "HEPMC3 version ${HEPMC3_VERSION} > 3.0 - adding HEPMC3 definition")
    add_definitions(-DHEPMC31)
  endif()
  # add_subdirectory(hepmc3)
  # add_subdirectory(pythiahepmc3)
endif(HEPMC3_FOUND)

# https://root.cern.ch/how/integrate-root-my-project-cmake
list(APPEND CMAKE_PREFIX_PATH $ENV{ROOTSYS})
list(APPEND CMAKE_PREFIX_PATH $ENV{ROOTDIR})
find_program( ROOTCONFIG root-config)
  message(STATUS "Using root-config at ${ROOTCONFIG}")
  if (EXISTS ${ROOTCONFIG})
    # indep. if root built with cmake assume the root-cint is in the path
    # execute_process ( COMMAND root-config --prefix WORKING_DIRECTORY /tmp OUTPUT_VARIABLE ROOT_DIR OUTPUT_STRIP_TRAILING_WHITESPACE )
    # #message ("[info] ROOT_DIR: ${ROOT_DIR}")
    # execute_process ( COMMAND root-config --etcdir WORKING_DIRECTORY /tmp OUTPUT_VARIABLE ROOT_ETCDIR OUTPUT_STRIP_TRAILING_WHITESPACE )
    # set( CMAKE_MODULE_PATH "${ROOT_ETCDIR}/cmake" )
    # execute_process ( COMMAND root-config --libs WORKING_DIRECTORY /tmp OUTPUT_VARIABLE ROOT_LIBS OUTPUT_STRIP_TRAILING_WHITESPACE )

    #message ("[info] CMAKE_MODULE_PATH: ${CMAKE_MODULE_PATH}")
    find_package(ROOT REQUIRED COMPONENTS RIO EG)
    if (ROOT_FOUND)
      include(${ROOT_USE_FILE}) 
      add_subdirectory(rutil)
      add_subdirectory(rutilext)
      add_subdirectory(alephR)
      if(TENNGEN)
        add_subdirectory(TennGen)
      endif()
      if(TGLAUBERMC)
        add_subdirectory(TGlauberMC)
      endif()
      if (EXISTS ${FASTJETCONFIG})
        add_subdirectory(fjtools)
	      add_subdirectory(ecorrel)
        add_subdirectory(othercorrel)
      endif()
    endif()
  # if(DEFINED ROOT_USE_FILE) 
  #   include(${ROOT_USE_FILE}) 
  # else() 
  #   include_directories(${ROOT_INCLUDE_DIRS}) 
  # endif() 
endif()
